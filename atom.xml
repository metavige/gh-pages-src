<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>@metavige</title>
  
  <subtitle>生命會自己找到出路，程式 Bug 不會自己修復，孩子～</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://metavige.github.io/"/>
  <updated>2019-12-16T06:15:19.616Z</updated>
  <id>https://metavige.github.io/</id>
  
  <author>
    <name>metavige (Ricky Chiang)</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitOps - use fluxcd</title>
    <link href="https://metavige.github.io/2019/12/16/gitops-use-fluxcd/"/>
    <id>https://metavige.github.io/2019/12/16/gitops-use-fluxcd/</id>
    <published>2019-12-16T12:00:00.000Z</published>
    <updated>2019-12-16T06:15:19.616Z</updated>
    
    <content type="html"><![CDATA[<p><a href="">https://fluxcd.io/</a></p><blockquote><p>Flux 目前是 CNCF 的 Sandbox 項目 (2019.08.20)</p></blockquote><p><img src="https://rammusxu.github.io/2019/07/03/gitops-flux-note/flux-flow.png" alt=""></p><p>圖片出處: <a href="">https://rammusxu.github.io/2019/07/03/gitops-flux-note/flux-flow.png</a></p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>原始碼專案透過 CI 方式，建置好 Image，並且發佈到 Docker Registry</li><li>另外有一個 Git Repository，專門存放所有的 kubernetes 設定檔案</li><li>由 Flux CD 去監聽 Docker Registry 以及 Git Repository 的變化<ul><li>監聽的 docker image 有新的 tag，可以同步變更 yml 內 tag 資訊 (git push)，以及變更 kubernetes 內的設定。</li><li>Git Repository 的設定變更，也會同步 kubernetes 的設定。</li></ul></li></ul><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><h3 id="安裝-fluxctl"><a href="#安裝-fluxctl" class="headerlink" title="安裝 fluxctl"></a>安裝 fluxctl</h3><p>參考 <a href="">https://docs.fluxcd.io/en/stable/references/fluxctl.html</a></p><h3 id="準備好一個-Git-Repository"><a href="#準備好一個-Git-Repository" class="headerlink" title="準備好一個 Git Repository"></a>準備好一個 Git Repository</h3><p>準備一個簡單的 repository，存放要設定的 yml</p><p>如果使用的是公司內部的 git repository，需要先參考 <a href="">https://docs.fluxcd.io/en/stable/guides/use-private-git-host.html</a> 的設定，將 known_hosts 設定到 Pod 內的 <code>~/.ssh/known_hosts</code> 檔案內，不然會無法連線。下方安裝步驟有說明。</p><p>Git Repository 內可以有目錄的規劃，管理不同種類的設定，fluxcd 會掃描子目錄內的變更。</p><h3 id="設定連線到-kubernetes"><a href="#設定連線到-kubernetes" class="headerlink" title="設定連線到 kubernetes"></a>設定連線到 kubernetes</h3><p>執行 <code>fluxctl</code> 的這台機器，需要可以使用 <code>kubectl</code> 指令。</p><p>但是這並非必要，因為可以將 <code>fluxctl</code> 產生出來的檔案，另外透過其他方式做 apply 的動作。</p><p>但是如果需要執行 <code>fluxctl</code> 其他指令，還是需要能連線到 kubernetes。</p><h2 id="Flux-安裝步驟"><a href="#Flux-安裝步驟" class="headerlink" title="Flux 安裝步驟"></a>Flux 安裝步驟</h2><h3 id="建立一個-namespace"><a href="#建立一個-namespace" class="headerlink" title="建立一個 namespace"></a>建立一個 namespace</h3><p>官方文件建議，建立一個 namespace 放 <code>flux</code> 的資源 (namespace 的規劃沒有特定，但將資源放在一起會比較好管理)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ kubectl create namespace flux</span></pre></td></tr></table></figure><blockquote><p>請注意，下方所有的設定都會是需要建立在這邊所建立的 namespace 中，如果這邊的 namespace 名稱有改變，記得改變下方的所有設定的 namespace</p></blockquote><h3 id="利用-fluxctl-產生-k8s-部署檔案"><a href="#利用-fluxctl-產生-k8s-部署檔案" class="headerlink" title="利用 fluxctl 產生 k8s 部署檔案"></a>利用 fluxctl 產生 k8s 部署檔案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ fluxctl install \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  --git-user&#x3D;&#123;&#125; \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  --git-email&#x3D;&#123;&#125; \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  --git-url&#x3D;&#123;&#125; \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  --git-path&#x3D;&#123;&#125; \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  --name flux &gt; fluxcd.yml</span></pre></td></tr></table></figure><p>上方的 git-user, git-email, git-url, git-path 是需要參考實際上 git 的位置與設定做調整，下方說明一下各自的意思</p><ul><li>git-user: 登入 git 的使用者帳號</li><li>git-email: 登入 git 的使用者電子郵件</li><li>git-url: git repostitory 的位置</li><li>git-path: 在 git repository 中，要檢查 yml 的目錄位置</li></ul><p>官方文件是直接做 <code>kubectl apply</code>，但為了下面的步驟，建議將輸出導出成檔案，方便修改。</p><h3 id="修改-fluxcd-yml-的-namespace-Optional"><a href="#修改-fluxcd-yml-的-namespace-Optional" class="headerlink" title="修改 fluxcd.yml 的 namespace (Optional)"></a>修改 fluxcd.yml 的 namespace (Optional)</h3><p>如果第一個步驟建立的 namespace 並非 flux，記得要改變 <code>fluxcd.yml</code> 內的 namespace 設定</p><h3 id="準備-known-hosts-針對-SSH-連線要使用"><a href="#準備-known-hosts-針對-SSH-連線要使用" class="headerlink" title="準備 known_hosts (針對 SSH 連線要使用)"></a>準備 known_hosts (針對 SSH 連線要使用)</h3><p>透過 <code>ssh-keyscan</code> 指令，用來取得 ssh server 的公鑰，這個動作，是要把這組公鑰，放在 fluxcd 的 POD 中的 <code>~/.ssh/know_hosts</code> 檔案內，讓 fluxcd 的 POD 可以透過 ssh 連線到 git 的服務器。</p><p>參考 <a href="">https://docs.fluxcd.io/en/stable/guides/use-private-git-host.html</a>  </p><p>為了要放到 kubernetes 去，參考了 flux 的文件，產生下方的 <code>flux-ssh.config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">data:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  known_hosts: |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    [這邊放 ssh-keyscan 產生的內容]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">kind: ConfigMap</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">metadata:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  name: flux-ssh-config</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  namespace: flux</span></pre></td></tr></table></figure><p>name 是參考 <code>fluxcd.yml</code> 中的定義，namespace 參考上方設定</p><h3 id="為了-SSH-設定，修改-fluxcd-yml-請注意-yml-的縮排"><a href="#為了-SSH-設定，修改-fluxcd-yml-請注意-yml-的縮排" class="headerlink" title="為了 SSH 設定，修改 fluxcd.yml (請注意 yml 的縮排)"></a>為了 SSH 設定，修改 fluxcd.yml (請注意 yml 的縮排)</h3><p>找到下方的設定，取消掉註解 。這個設定會在 Deployment 的 <code>spec/template/spec/volumes</code> 內</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># The following volume is for using a customised known_hosts¬</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"># file, which you will need to do if you host your own git¬</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"># repo rather than using github or the like. You&#39;ll also need to¬</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"># mount it into the container, below. See¬</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"># https:&#x2F;&#x2F;docs.fluxcd.io&#x2F;en&#x2F;latest&#x2F;guides&#x2F;use-private-git-host.html</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">- name: ssh-config</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  configMap:¬</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    name: flux-ssh-config</span></pre></td></tr></table></figure><p>接下來，找到 Deployment 內的 <code>spec/template/spec/container/volumeMounts</code> 內的設定，取消註解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># Include this if you need to mount a customised known_hosts¬</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"># file; you&#39;ll also need the volume declared above.¬</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">- name: ssh-config¬</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  mountPath: &#x2F;root&#x2F;.ssh</span></pre></td></tr></table></figure><h3 id="增加-insecure-registry-設定，修改-fluxcd-yml-請注意-yml-的縮排"><a href="#增加-insecure-registry-設定，修改-fluxcd-yml-請注意-yml-的縮排" class="headerlink" title="增加 insecure-registry 設定，修改 fluxcd.yml (請注意 yml 的縮排)"></a>增加 insecure-registry 設定，修改 fluxcd.yml (請注意 yml 的縮排)</h3><p>一般在公司內部提供的 Private Registry 通常都是走 HTTP 協定，所以需要設定 insecure-registry 讓 flux 可以取得 private registry metadata，下方的設定需要設定在 Deployment 內的 <code>spec/template/spec/container/args</code> 內</p><blockquote><p>這段是要自行加入的，沒有原始的設定可以取消註解</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># setup insecury-registry¬</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">- --registry-insecure-host&#x3D;private.registry.xxxx</span></pre></td></tr></table></figure><p>上方的設定，參考 <a href="">https://docs.fluxcd.io/en/stable/references/daemon.html</a> 內的參數說明來調整</p><h3 id="啟動-fluxcd"><a href="#啟動-fluxcd" class="headerlink" title="啟動 fluxcd"></a>啟動 fluxcd</h3><p>將上面設定的兩個檔案，<code>flux-ssh.config.yml</code> 以及 <code>fluxcd.yml</code>，透過 <code>kubectl</code> 將設定建立起來 (或透過 kubenetes dashboard 設定)。</p><h3 id="註冊-Git-user-SSH-Key"><a href="#註冊-Git-user-SSH-Key" class="headerlink" title="註冊 Git user SSH Key"></a>註冊 Git user SSH Key</h3><p>預設建立好 <code>fluxcd</code> 之後，可以透過 <code>fluxctl identity</code> 指令，取得在 <code>fluxcd</code> POD 內產生的 Public Key，然後設定到 Git 使用者的 SSH 金鑰內，讓 <code>fluxcd</code> 可以存取 Git Repository。</p><blockquote><p>這邊建立的 ssh public/private key，會存放到 kubernetes volume內，如果有重新建立 fluxcd 的動作，並不需要重新設定 git user ssh key。</p></blockquote><p>目前設定 Git 的存取，也可以事先產生好 SSH Key，可以參考 <a href="">https://docs.fluxcd.io/en/stable/guides/provide-own-ssh-key.html</a></p><h3 id="啟動-yml-內的自動處理機制"><a href="#啟動-yml-內的自動處理機制" class="headerlink" title="啟動 yml 內的自動處理機制"></a>啟動 yml 內的自動處理機制</h3><p>如果要讓 fluxcd 自動化的偵測 Docker Repository 變更，並且同步修改 Git 的設定，需要在 YML 內加入下面的 annotations 才可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">annotations:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  fluxcd.io&#x2F;automated: &#39;true&#39;</span></pre></td></tr></table></figure><p>透過上方的設定， flux 會檢查目前要部署的 Image 中是否有新的 Tag，如果有，就會同時間修改 YML 以及 kubernetes 的設定，並且同步推送變更到 Git 去</p><h2 id="跟-Flux-相關的一些注意事項"><a href="#跟-Flux-相關的一些注意事項" class="headerlink" title="跟 Flux 相關的一些注意事項"></a>跟 Flux 相關的一些注意事項</h2><h3 id="存取-private-registry"><a href="#存取-private-registry" class="headerlink" title="存取 private registry"></a>存取 private registry</h3><p>一般如果需要存取 Docker Private Registry，通常會在 Docker Host 內設定 insecure-registry，但是初步設定 flux 時，發現無法讀取 docker daemon.json 內 insecure-registry 的設定</p><p>設定方式目前未測試出來，設定方式可能可以參考 <a href="">https://github.com/fluxcd/flux/pull/1314</a></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>目前 Flux 的機制，是透過偵測 Git Repository 以及 Docker Registry 變更，來做到 Continuous Delivery 的機制，但是目前預設只會做到 Create/Update 的動作，如果開發者刪除了 Git Repository 內的設定，並不會刪除 kubernetes 內已經建立好的設定。</p><p>如果有需要做到刪除異動的變更處理，可能需要設定 <code>—sync-garbage-collection</code>，但預設的作法會是保守的，因為通常裡面不會只有由 <code>flux</code> 建立的資源。</p><h3 id="影響變更時間"><a href="#影響變更時間" class="headerlink" title="影響變更時間"></a>影響變更時間</h3><p>基本上，這邊的影響變更時間受到幾個時間影響，一個是掃描 GIT 的時間，一個是掃描 Docker Registry 的時間。</p><p>目前內部預設的掃描時間，都是五分鐘，其中影響的參數有兩個，一個是 <code>—sync-interval</code> (控制同步設定到 kubernetes 的頻率)，一個是 <code>—git-poll-interval</code> (查詢 git 新的 commit 的頻率)。</p><p>參考 <a href="">https://docs.fluxcd.io/en/stable/faq.html</a>，建議如果要較快速的影響變更，調整 <code>—git-poll-interval</code> 會比較好。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="">https://www.weave.works/technologies/gitops/</a></li><li><a href="">https://github.com/fluxcd/flux</a></li><li><a href="">https://docs.fluxcd.io/en/stable/</a></li><li><a href="">https://www.servicemesher.com/blog/flux-get-start-easy/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;&quot;&gt;https://fluxcd.io/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Flux 目前是 CNCF 的 Sandbox 項目 (2019.08.20)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://rammusxu.github.io/2019/07/03/gitops-flux-note/flux-flow.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;圖片出處: &lt;a href=&quot;&quot;&gt;https://rammusxu.github.io/2019/07/03/gitops-flux-note/flux-flow.png&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="程式開發" scheme="https://metavige.github.io/categories/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC/"/>
    
    
      <category term="docker" scheme="https://metavige.github.io/tags/docker/"/>
    
      <category term="kubernetes" scheme="https://metavige.github.io/tags/kubernetes/"/>
    
      <category term="devops" scheme="https://metavige.github.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>Docker 的反模式</title>
    <link href="https://metavige.github.io/2019/12/10/docker-anti-patterns/"/>
    <id>https://metavige.github.io/2019/12/10/docker-anti-patterns/</id>
    <published>2019-12-10T19:00:00.000Z</published>
    <updated>2019-12-16T06:15:19.608Z</updated>
    
    <content type="html"><![CDATA[<p>針對網路上面的文章，加上自己的解釋，說明如何避免做到 Docker 的反模式</p><p>原始文章: <a href="https://medium.com/containers-101/docker-anti-patterns-ad2a1fcd5ce1" target="_blank" rel="noopener">Docker Anti-Pattern</a></p><a id="more"></a><h2 id="反模式-1-將-Docker-視為虛擬機器-VM"><a href="#反模式-1-將-Docker-視為虛擬機器-VM" class="headerlink" title="反模式 1: 將 Docker 視為虛擬機器 (VM)"></a>反模式 1: 將 Docker 視為虛擬機器 (VM)</h2><p>Docker 的生命週期，是隨著應用程式的啟動與停止，所以，每個啟動的容器 (Container) 都有可能因爲應用程式發生狀況而停止。而 Docker 本身的機制，會將容器重新以 Image 的原始狀態再重新啟動。</p><p>與虛擬機器不同，容器本身並不需要長期，不間斷的執行。容器本身的特性就是會中斷、啟動快速、唯讀 Image 。所以在設計上，需要思考的並不是如何長期的讓容器不間斷地執行，而是思考如何透過 Docker 本身的機制，搭配 DevOps 的流程與適合的 Orchestrator，來讓服務可以不中斷。</p><p>而如果有思考到，如何在容器服務啟動的過程中，手動變更應用程式內容 (或設定) 的方式，都需要重新思考是否要搭配適當的 CI/CD 流程，對現有 Image 的修改。</p><p>這種反模式沒有解決方式，只有變更自己的思考方式，重新調整對 Docker 的做法</p><h2 id="反模式-2-建立不透明的-Docker-Image"><a href="#反模式-2-建立不透明的-Docker-Image" class="headerlink" title="反模式 2: 建立不透明的 Docker Image"></a>反模式 2: 建立不透明的 Docker Image</h2><p>通常建立 Docker Image 會思考：</p><ul><li>任何開發者，將 Dockerfile 與其資源 (包含原始碼) 下載後，在任何地方都可以建立出一致的 Image</li><li>所有的依賴性，包含開發程式所需的依賴項目，都有統一的取用或存取方式 (包含公司內部的 Repository 使用)</li><li>不使用外部依賴的工具，來建置 Image ，避免離開了建置環境，因為工具的依賴性，導致無法建置出相同的 Image</li><li>明確定義所使用的軟體版本 (包含套件依賴)</li><li>透過修改 Dockerfile 就可以做到修改應用程式的版本</li><li>未產出最終的 Image 版本，無法移轉到生產環境執行</li></ul><p>如果撰寫 Dockerfile 的時候，無法在另外一個環境重現，表示設計上需要重新調整</p><p>解決方式是仔細了解應用程式建置的步驟，並且仔細的了解 Dockerfile 建置時所發生的狀況，才能設計出更好的 Image 建置步驟。</p><blockquote><p>所以在建置 Docker 的時候，也是對自己開發的程式語言一種重新理解的方式</p></blockquote><h2 id="反模式-3-建立有副作用-Side-Effect-的-Dockerfile"><a href="#反模式-3-建立有副作用-Side-Effect-的-Dockerfile" class="headerlink" title="反模式 3: 建立有副作用 (Side-Effect) 的 Dockerfile"></a>反模式 3: 建立有副作用 (Side-Effect) 的 Dockerfile</h2><p>因為上述的特性，Dockerfile 應該任何人下載都可以建立出相同的 Image ，所以不管幾次的建立，應該最終產出的 Image 都要是一致的，不管是否是在開發者的環境建置，或者是透過 CI 的服務器來建置。</p><p>但是如果建置階段，在 Dockerfile 中有以下的步驟：</p><ul><li>執行 git commit 或其他 git 操作</li><li>清除或修改資料庫資料</li><li>呼叫其他外部服務</li></ul><p>這樣表示每次建置的步驟，都會有其副作用產生，而且不同次的建置，可能會造成不同的後果。</p><p>不要把 Dockerfile 當作 CI 的步驟，或者是當作無限功能的 Bash 腳本集合。</p><p>解決方案是簡化 Dockerfile，僅包含下列的可能步驟：</p><ul><li>複製原始碼</li><li>下載依賴項目</li><li>編譯/打包應用程式</li><li>處理/縮小/轉換 Local 資源</li><li>在 Docker 環境中執行 shell 文件或編輯文件</li></ul><p>因為 Dockerfile 本身有 Cache 機制，如果每個圖層之間並沒有檔案的變化，就可以從 Cache 重新使用，但如果其中的ㄧ個步驟有副作用，會破壞 Cache 機制的執行，導致每次建置都會重新產生新的圖層。</p><h2 id="反模式-4-混淆用於部署以及用於開發的-Image"><a href="#反模式-4-混淆用於部署以及用於開發的-Image" class="headerlink" title="反模式 4: 混淆用於部署以及用於開發的 Image"></a>反模式 4: 混淆用於部署以及用於開發的 Image</h2><p>通常在建置 Image 的時候，會有兩種 Image 的角色：部署用的 Image 跟開發用的 Image (或者是 CI/CD 用的 Image )</p><p>部署 Image 通常具有下面的特性</p><ul><li>最小化/編譯過後的應用程式代碼以及 Runtime 的依賴項目</li><li>沒有了!</li></ul><p>第二類是開發用的 Image 或是 CI/CD 用的 Image</p><ul><li>原始碼 (沒有處理過的)</li><li>編譯器/壓縮器</li><li>測試框架/工具</li><li>安全掃描/代碼質量掃描/程式碼靜態分析工具</li><li>Cloud 集成工具</li><li>CI/CD Pipeline 所需要的實用工具</li></ul><p>通常部署到生產環境的 Image ，應該要最小化、安全且經過嚴格處理。在 CI/CD 步驟所產生的任何 Image 通常不會部署到其他地方，所以他的要求 (大小或安全性) 就會小一點。</p><p>舉例來說，部署 Image 裡面沒有理由要包含 git 或者是 vim 工具。</p><p>不過這邊，請不要思考本地端開發以及生產環境的部署要結合在一起，目前還是很有難度的。</p><p>總結，請嘗試了解每種 Image 所扮演的角色。一種 Image 應該只扮演一種角色。如果在部署 Image 中包含了測試的工具或套件，就表示這部分是有做錯誤的。可以嘗試使用 Docker 的多階段建置 (Multi-Stage Build)</p><h2 id="反模式-5-不同環境-QA-Staging-Production-建置不同的-Image"><a href="#反模式-5-不同環境-QA-Staging-Production-建置不同的-Image" class="headerlink" title="反模式 5: 不同環境 (QA, Staging, Production) 建置不同的 Image"></a>反模式 5: 不同環境 (QA, Staging, Production) 建置不同的 Image</h2><p>使用容器的其中一個優點是他的不可變特性，這表示 Docker Image 在任何地方執行都應該有相同的結果。所以 Docker Image 應該只有建立一次，然後在散佈到不同的各種環境，直到最後的生產環境。</p><p>因為這樣，才可以保證在測試環境中的內容與另外一個環境的內容完全一致。如果針對不同的環境建置不同的 Image ，無法保證其行為是否一致，這樣或許表示會需要導入更多的測試，或者是需要導入額外的 debug 工具，這樣反而會讓不同環境間的差異更難處理。</p><p>但是，不同環境有不同的設定 (像是 Secret 或環境變數)，這是完全正常的，但是請保證其他所有內容都應該完全一樣。</p><h2 id="反模式-6-在生產服務器上直接產生-Docker-Image"><a href="#反模式-6-在生產服務器上直接產生-Docker-Image" class="headerlink" title="反模式 6: 在生產服務器上直接產生 Docker Image"></a>反模式 6: 在生產服務器上直接產生 Docker Image</h2><p>Docker registry 是用來存放所建立好的應用程式 Image 的一個目錄服務，可以讓任何環境都可以很容易的重新取得或部署應用服務的 Image ，也是一個中心的服務，用來保存應用服務 Image 的歷史版本。</p><p>通常公司會思考使用兩組 registry，一個對應開發環境，一個對應生產環境。一個 docker image 應該建置完後就被放置到開發的 registry，經過整合測試、安全掃描、以及其他的質量檢查等工作，確認之後就可以升級到正式的 registry 去，並發行到生產環境執行。</p><p>Docker 的部署規劃，應該要包含 registry 本身，可以用來充當資產儲存庫也當作中間的儲存庫。</p><p>如果做法是在生產環境透過 git 直接抓下原始碼來建置，這部分會造成許多問題</p><ul><li>生產環境的機器應該不能訪問 git repository</li><li>Git 應該是開發人員使用的工具，不應該是營運環境所需要使用的工具</li><li>在生產環境上執行的 image 是沒有辦法管理的，你不會知道上面跑了什麼 image</li><li>git repository 會需要外部的訪問權限，如果公司內部對原始碼有安全性管理的話</li></ul><p>這種直接抓下原始碼建置的動作，可能在剛開始建置環境的時候行得通，但如果面臨到較大量的安裝，就會有瓶頸。 docker registry 是有他的優勢，而且現在的工具都還有其他的安全性功能 (像是弱點掃描等)，而且現在 docker registry 也都有相關的 API 可以操作。</p><p>而且，透過 docker registry ，原始碼也可以安全地在公司防火牆內保存。</p><h2 id="反模式-7-使用-git-hash-代替-docker-image"><a href="#反模式-7-使用-git-hash-代替-docker-image" class="headerlink" title="反模式 7: 使用 git hash 代替 docker image"></a>反模式 7: 使用 git hash 代替 docker image</h2><blockquote><p>這邊的 git hash 指的是每次 git 的 commit，因為每次 commit.都會產生一組唯一的 hash，用來表示每次的程式碼發佈版本</p></blockquote><p>參考上面的兩個反模式推論，代表如果使用了 docker，docker registry 應該是唯一用來發行最終產出的最後結果。開發人員以及維運人員，應該使用容器來當作共通的語言，互相之間移交的項目也應該會是容器，而不是 git 的某個 commit。</p><p>較早以前的產品發行，可能會是以一個版本管理的 commit 為一個發行階段，透過 CI/CD 的建置，產出最終的成品 (artifact)，但是如果要重新發行到不同環境，可能會以相同的 commit 為主，重新建置發行一套相同的應用程式，這樣也容易浪費建置資源。</p><p>如果採用了 docker image 為最終發行的成品，表示維運人員並不需要知道 git repo 發生了什麼事情，他們只需要知道 docker image 是否已經準備好了，可以部署到生產環境去，因為是使用相同的 image，所以不需要重新建置。</p><p>維運人員也可以不需要了解測試工具或建置程式的系統等，一般維運的日常操作並不需要。</p><h2 id="反模式-8-硬編碼-secret-以及設定在-docker-image-中"><a href="#反模式-8-硬編碼-secret-以及設定在-docker-image-中" class="headerlink" title="反模式 8: 硬編碼 secret 以及設定在 docker image 中"></a>反模式 8: 硬編碼 secret 以及設定在 docker image 中</h2><p>此模式與反模式 5 相關。通常如果不同環境需要不同的 image，代表裡面包含了不同環境的設定或一些安全金鑰等資訊。</p><p>這樣表示，你需要在建置的過程當中管裡所有環境的設定以及安全金鑰等資訊，這會讓整個建置 (CI/CD) 步驟變得複雜。思考<a href="https://12factor.net/config" target="_blank" rel="noopener">12 因子的建置</a>部分說明。</p><p>應用程式應該是在執行階段才獲取到設定，而不是在建置的時候。這有很多種做法可以做到，像是環境變數，或者是搭配其他的服務 (k8s configmap, etcd, zookeeper, consul 等) 以及 secret 的機制 (k8s secret, confidart, cerberus, valutrepo 等)</p><h2 id="反模式-9-Dockerfile-內做的事情太多"><a href="#反模式-9-Dockerfile-內做的事情太多" class="headerlink" title="反模式 9: Dockerfile 內做的事情太多"></a>反模式 9: Dockerfile 內做的事情太多</h2><p>原文的範例，將 Dockerfile 當作 CI 使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># Run Sonar analysis</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">FROM newtmitch&#x2F;sonar-scanner AS sonar</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">COPY src src</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">RUN sonar-scanner</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"># Build application</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">FROM node:11 AS build</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">WORKDIR &#x2F;usr&#x2F;src&#x2F;app</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">COPY . .</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">RUN yarn install \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"> yarn run lint \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"> yarn run build \</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"> yarn run generate-docs</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">LABEL stage&#x3D;build</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"># Run unit test</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">FROM build AS unit-tests</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">RUN yarn run unit-tests</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">LABEL stage&#x3D;unit-tests</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"># Push docs to S3</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">FROM containerlabs&#x2F;aws-sdk AS push-docs</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">ARG push-docs&#x3D;false</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">COPY --from&#x3D;build docs docs</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">RUN [[ &quot;$push-docs&quot; &#x3D;&#x3D; true ]] &amp;&amp; aws s3 cp -r docs s3:&#x2F;&#x2F;my-docs-bucket&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"># Build final app</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">FROM node:11-slim</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">EXPOSE 8080</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">WORKDIR &#x2F;usr&#x2F;src&#x2F;app</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">COPY --from&#x3D;build &#x2F;usr&#x2F;src&#x2F;app&#x2F;node_modules node_modules</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">COPY --from&#x3D;build &#x2F;usr&#x2F;src&#x2F;app&#x2F;dist dist</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">USER node</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">CMD [&quot;node&quot;, &quot;.&#x2F;dist&#x2F;server&#x2F;index.js&quot;]</span></pre></td></tr></table></figure><p>這個範例有結合到前面的幾個反模式：</p><ul><li>假定 Sonar 服務存在 (模式 2)</li><li>可能會推送資料到 S3 (模式 3)，具有潛在的副作用</li><li>可以做為佈署 image ，也可以作為開發 image (模式 4)</li></ul><p>Dockerfile 與 CI 的技術是不同的領域，基本上現在的 CI 功能已經可以做到很好，不需要將要在 CI 管道中執行的指令與在 Docker 容器中執行的指令混淆。</p><p>修改此 Dockerfile 的方法是把它拆成不同的 Dockerfile，並在 CI 階段用不同的步驟分開執行，讓每個 Dockerfile 都有自己的單一目標。</p><h2 id="反模式-10-Dockerfile-內做的事情太少"><a href="#反模式-10-Dockerfile-內做的事情太少" class="headerlink" title="反模式 10: Dockerfile 內做的事情太少"></a>反模式 10: Dockerfile 內做的事情太少</h2><p>容器在建置時，會包含處理應用程式的程式庫依賴關係，這也很適合用來隔離每個應用程式之間的程式庫以及框架版本。因為傳統開發人員會在自己的開發環境安裝不同版本的工具，所以常常導致開發環境的混亂。但是 Dockerfile 可以用來準確的描述應用程式所需要的內容 (但是這需要開發人員確實的使用這樣的作法，這種關係才會成立)。</p><p>所以對維運人員來講，可以不需要安裝不同的開發工具，像是 Java、.NET、Python 等，只需要下載不同的 docker image 即可。</p><p>早期有一種建置 docker image 的方式，是將相依的程式庫在建置過程當中從本地端複製進去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">VOLUME &#x2F;tmp</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">ARG JAR_FILE</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">COPY $&#123;JAR_FILE&#125; app.jar</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom&quot;，&quot;-jar&quot;,&quot;&#x2F;app.jar&quot;]</span></pre></td></tr></table></figure><p>在這份 Dockerfile 中並沒有說明 app.jar 是怎麼產生的，也沒有說明來源，所以實際建置的時候，是無法得知，這會造成建置的困難，如果還有不同語言，會更麻煩。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">COPY pom.xml &#x2F;tmp&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">COPY src &#x2F;tmp&#x2F;src&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">WORKDIR &#x2F;tmp&#x2F;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">RUN .&#x2F;gradlew build</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">COPY &#x2F;tmp&#x2F;build&#x2F;app.war &#x2F;app.jar</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd &#x3D; file:&#x2F;dev&#x2F;.&#x2F;urandom&quot;,&quot;-jar&quot;,&quot;&#x2F;app.jar&quot;]</span></pre></td></tr></table></figure><p>上面的 Dockerfile 就明確的說明了建置步驟，並且，建置時，不需要安裝 Java 環境。但是還是有改善的空間 (Multi-Stage Build)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;針對網路上面的文章，加上自己的解釋，說明如何避免做到 Docker 的反模式&lt;/p&gt;
&lt;p&gt;原始文章: &lt;a href=&quot;https://medium.com/containers-101/docker-anti-patterns-ad2a1fcd5ce1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker Anti-Pattern&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="程式開發" scheme="https://metavige.github.io/categories/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC/"/>
    
    
      <category term="docker" scheme="https://metavige.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>.Net Standard 筆記</title>
    <link href="https://metavige.github.io/2017/08/31/dotnet-standard-note/"/>
    <id>https://metavige.github.io/2017/08/31/dotnet-standard-note/</id>
    <published>2017-08-31T21:09:47.000Z</published>
    <updated>2019-12-16T06:15:19.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="簡單筆記"><a href="#簡單筆記" class="headerlink" title="簡單筆記"></a>簡單筆記</h2><ul><li>標準的基礎程式庫 API 介面定義</li><li>可以跨平台</li><li>目前 .Net framework 4.6.1 支援 .Net Standard 2.0 (.Net Standard 1.x 僅有 .Net Code 1.x 支援)</li><li>.Net Standard 版本控制規則<ul><li>累加：較新的版本會包含較舊版本的 API</li><li>不可變：版本提交後，該版本便已凍結</li></ul></li><li>自行根據 PCL (Portable Class Library)，決定設定檔集合 (就是決定要用哪套實作的程式庫，看是要用 .Net framework 或是 .Net Core)</li></ul><h2 id="架構圖"><a href="#架構圖" class="headerlink" title="架構圖"></a>架構圖</h2><p><img src="https://docs.microsoft.com/zh-tw/dotnet/standard/media/components.png" alt=""></p><h2 id="網路介紹文章"><a href="#網路介紹文章" class="headerlink" title="網路介紹文章"></a>網路介紹文章</h2><ul><li><a href="http://blog.darkthread.net/post-2016-09-27-net-standard-2-0.aspx" target="_blank" rel="noopener">2016.09.27 .NET Standard 2.0 是什麼？可以吃嗎？ (黑暗執行緒)</a></li><li><a href="https://dotblogs.com.tw/aspnetshare/2016/04/10/20160409-netcore-netstandard" target="_blank" rel="noopener">2016.04.10 ASP.NET Core 與 .Net Core, .Net Platform Standard, 以及 Shared Runtime 之間的關係 (微軟開發工具的資訊分享)</a></li><li><a href="http://bruceyclee.tw/2017/02/25/netstandard/" target="_blank" rel="noopener">2017.02.25 再來多聊一點 .Net Standard (大毛電腦科學筆記)</a></li><li><a href="https://dotblogs.com.tw/gelis/2017/08/20/143437" target="_blank" rel="noopener">2017-08-20 .NET Standard 2.0 與 .NET 的未來與發展 (gelis 技術隨筆)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;簡單筆記&quot;&gt;&lt;a href=&quot;#簡單筆記&quot; class=&quot;headerlink&quot; title=&quot;簡單筆記&quot;&gt;&lt;/a&gt;簡單筆記&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;標準的基礎程式庫 API 介面定義&lt;/li&gt;
&lt;li&gt;可以跨平台&lt;/li&gt;
&lt;li&gt;目前 .Net framew
      
    
    </summary>
    
    
    
      <category term="dotnet" scheme="https://metavige.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Makefile for Docker Build</title>
    <link href="https://metavige.github.io/2017/03/28/makefile-for-dockerbuild/"/>
    <id>https://metavige.github.io/2017/03/28/makefile-for-dockerbuild/</id>
    <published>2017-03-28T21:34:06.000Z</published>
    <updated>2019-12-16T06:15:19.628Z</updated>
    
    <content type="html"><![CDATA[<p>其實我對 Makefile 算是一知半解，趁此機會學習一下    </p><a id="more"></a><p>我最近寫的一個 Makefile  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">IMAGE_NAME&#x3D;apt-cacher-ng</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">PUSH_NAME&#x3D;registry.co&#x2F;nebula&#x2F;$&#123;IMAGE_NAME&#125;:v20170328</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">build:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  docker build -t $&#123;IMAGE_NAME&#125; .</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">push:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  docker tag $&#123;IMAGE_NAME&#125; $&#123;PUSH_NAME&#125; &amp;&amp; docker push $&#123;PUSH_NAME&#125; &amp;&amp; docker rmi $&#123;PUSH_NAME&#125;</span></pre></td></tr></table></figure><p>老實說，我也不知道什麼才是對的，只是這樣我可以跑，好像就是對的勒<br>真的看了 Makefile 的教學之後才發現自己錯很多地方  </p><ul><li>我沒寫 <code>.PHONY</code></li><li>我不知道還有相依性這種東西？？</li><li>原來裡面可以把檔案當作相依性的檢查，然後用來執行要執行的 task。</li><li>以往都是笨笨的自己下一堆 <code>make target</code> 的動作，還想說 Makefile 真難用。原來可以一個相依另外一個，只需要下一次 <code>make</code> 就好</li><li><code>$&lt;</code> 等於相依的資料，<code>$@</code> 表示 target 本身，<code>%</code> 則是樣式規則.....學起來</li></ul><p>所以，算了，參考別人的東西 <a href="https://github.com/mvanholsteijn/docker-makefile" target="_blank" rel="noopener">Makefile</a> 之後自己慢慢學好了  </p><ul><li><a href="https://maxubuntu.blogspot.tw/2010/02/makefile.html" target="_blank" rel="noopener">Makefile 範例教學</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其實我對 Makefile 算是一知半解，趁此機會學習一下    &lt;/p&gt;
    
    </summary>
    
    
      <category term="程式開發" scheme="https://metavige.github.io/categories/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC/"/>
    
    
      <category term="docker" scheme="https://metavige.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Golang Day 3</title>
    <link href="https://metavige.github.io/2017/03/09/golang-day3/"/>
    <id>https://metavige.github.io/2017/03/09/golang-day3/</id>
    <published>2017-03-09T21:55:40.000Z</published>
    <updated>2019-12-16T06:15:19.616Z</updated>
    
    <content type="html"><![CDATA[<p>學習其實很無聊～沒有特別要做什麼的話，看著看著就想睡了～所以後來決定，之後就把程式碼做好放到 <a href="https://github.com/metavige/golang.learn" target="_blank" rel="noopener">github</a> 去好了<br>一次想一個想要做的小功能，這樣或許比較有趣  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;學習其實很無聊～沒有特別要做什麼的話，看著看著就想睡了～
所以後來決定，之後就把程式碼做好放到 &lt;a href=&quot;https://github.com/metavige/golang.learn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;
      
    
    </summary>
    
    
      <category term="程式開發" scheme="https://metavige.github.io/categories/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC/"/>
    
    
      <category term="golang" scheme="https://metavige.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang Day 2</title>
    <link href="https://metavige.github.io/2017/03/08/golang-day2/"/>
    <id>https://metavige.github.io/2017/03/08/golang-day2/</id>
    <published>2017-03-08T00:00:00.000Z</published>
    <updated>2019-12-16T06:15:19.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Golang-語法注意"><a href="#Golang-語法注意" class="headerlink" title="Golang 語法注意"></a>Golang 語法注意</h2><ul><li>格式很重要，不管是空行或者是 TAB、大括號等位置，很重要，會編譯不過。不過可以用 gofmt 工具幫你自動排版程式。</li><li>所有的程式需要用 package 整理，有點像是 java package/module 的觀念</li><li>主程式一定是 <code>package main</code>, 而且一定會呼叫 <code>func main()</code>  </li><li>引用不必要的 packages 會錯誤</li><li>沒用到的變數也會錯誤</li><li>不需要分號結尾</li><li>條件式不需要用 () 包起來 (這我就有點不習慣了～因為 Java, javascript, C# 都要)</li><li>golang 應該不算是 OOP, 所以要習慣沒有類別 (Class) 封裝這件事情</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://wizardforcel.gitbooks.io" target="_blank" rel="noopener">GO 聖經 - gitbook</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Golang-語法注意&quot;&gt;&lt;a href=&quot;#Golang-語法注意&quot; class=&quot;headerlink&quot; title=&quot;Golang 語法注意&quot;&gt;&lt;/a&gt;Golang 語法注意&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;格式很重要，不管是空行或者是 TAB、大括號等位置，很重
      
    
    </summary>
    
    
      <category term="程式開發" scheme="https://metavige.github.io/categories/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC/"/>
    
    
      <category term="golang" scheme="https://metavige.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang Day 1</title>
    <link href="https://metavige.github.io/2017/03/06/golang-day1/"/>
    <id>https://metavige.github.io/2017/03/06/golang-day1/</id>
    <published>2017-03-06T22:00:00.000Z</published>
    <updated>2019-12-16T06:15:19.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">brew install golang</span></pre></td></tr></table></figure><h2 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h2><ul><li><code>GOROOT</code>: GO 安裝的地方，用 <code>brew</code> 安裝的，可以設定 <code>/usr/local/opt/go/libexec</code> 就可以</li><li><code>GOPATH</code>: GO 執行的時候要的路徑，看專案在哪邊就設定在哪邊</li></ul><h2 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h2><p>一般是指向專案位置，裡面還會切分三個目錄</p><ul><li>src: 一般程式碼放的地方，可以包含網址．比如說 github.com/golang/golint 這樣的方式</li><li>pkg: 編譯後的檔案</li><li>bin: binary file</li></ul><h2 id="Empty-Go"><a href="#Empty-Go" class="headerlink" title="Empty Go"></a>Empty Go</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>注意空行以及大括弧的位置，golang 很注意<strong>程式碼格式</strong>！</p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    fmt.Println(<span class="string">"Hello, World"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安裝&quot;&gt;&lt;a href=&quot;#安裝&quot; class=&quot;headerlink&quot; title=&quot;安裝&quot;&gt;&lt;/a&gt;安裝&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="程式開發" scheme="https://metavige.github.io/categories/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC/"/>
    
    
      <category term="golang" scheme="https://metavige.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Akka.Net 不錯用</title>
    <link href="https://metavige.github.io/2017/02/13/akkadotnet-good/"/>
    <id>https://metavige.github.io/2017/02/13/akkadotnet-good/</id>
    <published>2017-02-13T00:00:00.000Z</published>
    <updated>2019-12-16T06:15:19.608Z</updated>
    
    <content type="html"><![CDATA[<p>真的使用之後，越來越覺得 Actor Model 是個好物，因為他本來就是拿來做平行運算用的。</p><p>建議可以先從以下的幾篇文章以及 Github 的範例開始</p><ul><li><a href="https://petabridge.com/training/akka-design-patterns/" target="_blank" rel="noopener">Akka.Net Application Architecture and Design</a></li><li><a href="https://petabridge.com/training/akka-remoting/" target="_blank" rel="noopener">Building Networked .NET Applications with Akka.Remote</a></li><li><a href="https://petabridge.com/training/akka-clustering/" target="_blank" rel="noopener">.NET Distributed Systems Architecture and Design with Akka.Cluster</a></li></ul><h2 id="好處"><a href="#好處" class="headerlink" title="好處"></a>好處</h2><p>我剛開始做的時候，其實是想到 Sequence Diagram。因為 Actor Model 的重點其實就是在訊息的傳遞與處理，只是在整體架構上有一個 ActorSystem 幫忙做處理</p><p>根據以下的圖片</p><p><img src="http://getakka.net/docs/images/actor.png" alt=""></p><p>一個 Actor 在建立之後，<a href="http://getakka.net" target="_blank" rel="noopener">AkkaDotNet</a> 會幫你建立整個 Actor 的基本行為。包含一個 Mailbox、預設的狀態等，而且也預設了每個 Actor 都有可以有 Children Actors所以，當你傳遞一個訊息給 Actor 的時候，其實不是直接呼叫 Actor 中處理訊息的方法，而是先進入 Mailbox，類似郵件的方式排隊處理。</p><p>當處理有問題的時候，你是可以在 Handle 方法中，直接拋出錯誤，讓 Actor 失敗。如此一來就會觸發上層 Actor 的 SupervisorStrategy。預設的 Strategy 可以參考 <a href="http://getakka.net/docs/Fault%20tolerance" target="_blank" rel="noopener">Fault Tolerance</a> 文件</p><p>以下是本機範例</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a new actor system (a container for your actors)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> system = ActorSystem.Create(<span class="string">"MySystem"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create your actor and get a reference to it.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// This will be an "ActorRef", which is not a</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// reference to the actual actor instance</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// but rather a client or proxy to it.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greeter = system.ActorOf&lt;GreetingActor&gt;(<span class="string">"greeter"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Send a message to the actor</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">greeter.Tell(<span class="keyword">new</span> Greet(<span class="string">"World"</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// This prevents the app from exiting</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// before the async work is done</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">Console.ReadLine();</span></pre></td></tr></table></figure><h2 id="Akka-Remote"><a href="#Akka-Remote" class="headerlink" title="Akka.Remote"></a>Akka.Remote</h2><p>你寫好了 Actor，也在同一個系統中跑完所有的流程，如果你需要做分散 Loading 的動作，不需要你把程式碼呼叫的部分再大改。</p><p>你只需要改變取得 Actor 的路徑。</p><p>是的，路徑！</p><p>預設取得 Actor 的路徑是用 actor name 來取得，取回來之後基本上就是一個 IActorRef 類別的物件(可以參考上面的範例)</p><p>當你需要取得遠端的 ActorRef 時，你只需要修改設定(當然要加上 Akka.Remote 套件)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">akka &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    actor &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        provider &#x3D; &quot;Akka.Remote.RemoteActorRefProvider, Akka.Remote&quot;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    remote &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        helios.tcp &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            port &#x3D; 8080</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            hostname &#x3D; localhost</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>然後修改你取得 Actor 的『路徑』就可以。就好像訪問 HTTP 一樣的路徑～</p><p><img src="http://getakka.net/docs/remoting/images/remote-address-annotation.png" alt=""></p><p>像上面的本機範例，取得 Actor 的路徑改一下就可以</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greeter = system.ActorOf&lt;GreetingActor&gt;(<span class="string">"akka.tcp://MySystem@localhost:8080/user/greeter"</span>);</span></pre></td></tr></table></figure><h2 id="Akka-Cluster"><a href="#Akka-Cluster" class="headerlink" title="Akka.Cluster"></a>Akka.Cluster</h2><p>當你的系統越來越大，需要擴充的時候，可以參考使用 Akka.Cluster一樣不太需要調整太多程式，只需要加上 Akka.Cluster 套件使用以及設定調整主體處理邏輯應該都不需要調整太多(除非你寫的太爛～)</p><p>Akka.Cluster 與 Akka.Remote 不太一樣的是，多出了 High Availability 的管理。主要是針對每個 Actor System Node 間的互相認知通訊，以及其他管理節點的功能但是因為我還沒用到，詳細的東西我不太清楚</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="http://getakka.net" target="_blank" rel="noopener">getakkanet</a></li><li><a href="http://getakka.net/docs/" target="_blank" rel="noopener">官方文件</a> - 必看！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;真的使用之後，越來越覺得 Actor Model 是個好物，因為他本來就是拿來做平行運算用的。&lt;/p&gt;
&lt;p&gt;建議可以先從以下的幾篇文章以及 Github 的範例開始&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://petabridge.com/training
      
    
    </summary>
    
    
      <category term="程式開發" scheme="https://metavige.github.io/categories/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC/"/>
    
    
      <category term="dotnet" scheme="https://metavige.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch Curator</title>
    <link href="https://metavige.github.io/2016/11/18/es_curator/"/>
    <id>https://metavige.github.io/2016/11/18/es_curator/</id>
    <published>2016-11-18T13:34:30.000Z</published>
    <updated>2019-12-16T06:15:19.616Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/elastic/curator" target="_blank" rel="noopener">Curator</a> 一個用來管理 ElasticSearch indices/snapshots 的工具</p><a id="more"></a><p>之前有用這個來刪除 indices，但是因為之前用的指令比較簡單，都是統一刪除 21 天前的資料<br>現在裡面資料比較複雜，所以需要做一些變化<br>原本以為是不是下兩次指令就好，現在發現可以一次指定多個設定一次做～  </p><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/about.html" target="_blank" rel="noopener">參考文件 - Curator Guide</a></p><h3 id="CONFIG"><a href="#CONFIG" class="headerlink" title="CONFIG"></a>CONFIG</h3><p>連接 ElasticSearch 所需要的設定檔案，預設是應該放在 <code>~/.curator/curator.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">client:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">hosts:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="string">es</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">port:</span> <span class="number">9200</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">url_prefix:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">use_ssl:</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">certificate:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">client_cert:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">client_key:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">ssl_no_validate:</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">http_auth:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">timeout:</span> <span class="number">30</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">master_only:</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">loglevel:</span> <span class="string">INFO</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">logfile:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">logformat:</span> <span class="string">default</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">blacklist:</span> <span class="string">['elasticsearch',</span> <span class="string">'urllib3'</span><span class="string">]</span></span></pre></td></tr></table></figure><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>我這邊因為會有兩組 indices<br>其中我想 topbeat 資料比較多，保留七天。<br>packetbeat 資料比較少，可以保留久一點，所以我就分兩個 action 來設定</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="attr">actions:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">1:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">action:</span> <span class="string">delete_indices</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">description:</span> <span class="string">remove</span> <span class="string">topbeat</span> <span class="string">indices</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">options:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">ignore_empty_list:</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">timeout_override:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">continue_if_exception:</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">disable_action:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">filters:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">filtertype:</span> <span class="string">pattern</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">kind:</span> <span class="string">prefix</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">value:</span> <span class="string">topbeat-</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">exclude:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">filtertype:</span> <span class="string">age</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">source:</span> <span class="string">name</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">direction:</span> <span class="string">older</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">timestring:</span> <span class="string">'%Y.%m.%d'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">unit:</span> <span class="string">days</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">unit_count:</span> <span class="number">7</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">exclude:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="attr">2:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">action:</span> <span class="string">delete_indices</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">description:</span> <span class="string">remove</span> <span class="string">packetbeat</span> <span class="string">indices</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">options:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">ignore_empty_list:</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">timeout_override:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">continue_if_exception:</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">disable_action:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="attr">filters:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">filtertype:</span> <span class="string">pattern</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">kind:</span> <span class="string">prefix</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">value:</span> <span class="string">packetbeat-</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">exclude:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="bullet">-</span> <span class="attr">filtertype:</span> <span class="string">age</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">source:</span> <span class="string">name</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">direction:</span> <span class="string">older</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">timestring:</span> <span class="string">'%Y.%m.%d'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">unit:</span> <span class="string">days</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">unit_count:</span> <span class="number">35</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">      <span class="attr">exclude:</span></span></pre></td></tr></table></figure><h3 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h3><p>接下來只需要執行下面指令就可以了～  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&gt; curator action.yml</span></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>我把專案放在 Github 上面: <a href="https://github.com/metavige/elasticsearch-curator" target="_blank" rel="noopener">elasticsearch-curator</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/elastic/curator&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Curator&lt;/a&gt; 一個用來管理 ElasticSearch indices/snapshots 的工具&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://metavige.github.io/tags/docker/"/>
    
      <category term="elasticsearch" scheme="https://metavige.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Docker Live Migration</title>
    <link href="https://metavige.github.io/2016/11/11/Migration/"/>
    <id>https://metavige.github.io/2016/11/11/Migration/</id>
    <published>2016-11-11T13:13:12.000Z</published>
    <updated>2019-12-16T06:15:19.608Z</updated>
    
    <content type="html"><![CDATA[<iframe src="//www.slideshare.net/slideshow/embed_code/key/GvdO7izO4dp714" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/PhilEstes/live-container-migration-openstack-summit-barcelona-2016" title="Live Container Migration: OpenStack Summit Barcelona 2016" target="_blank">Live Container Migration: OpenStack Summit Barcelona 2016</a> </strong> from <strong><a target="_blank" href="//www.slideshare.net/PhilEstes">Phil Estes</a></strong> </div><a id="more"></a><p>簡單列一下我聽到的重點</p><ul><li>Linux Kernel 3.11 才支援</li><li>透過一個叫做 CRIU 的技術達成<ul><li>參考網站: <a href="https://criu.org/" target="_blank" rel="noopener">CRIU</a></li></ul></li><li>Docker 1.13 experimental build 支援</li><li>有兩個層面<ul><li>In-Memory Change<ul><li>In-Memory + Filesystem Change</li></ul></li></ul></li><li>透過 checkpoint 的方式，將變更記錄下來，我猜測是以版本控管的方式 push 相關的 metadata</li><li>在新的機器上，可以透過 pull 方式 merge 新的 metadata 變更，然後繼續往下執行</li></ul><p>如果這個技術真的可以達到，那其實真的要把 VM 幹掉很快～</p>]]></content>
    
    <summary type="html">
    
      &lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/GvdO7izO4dp714&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/PhilEstes/live-container-migration-openstack-summit-barcelona-2016&quot; title=&quot;Live Container Migration: OpenStack Summit Barcelona 2016&quot; target=&quot;_blank&quot;&gt;Live Container Migration: OpenStack Summit Barcelona 2016&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;//www.slideshare.net/PhilEstes&quot;&gt;Phil Estes&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
    
    </summary>
    
    
      <category term="程式開發" scheme="https://metavige.github.io/categories/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC/"/>
    
    
      <category term="docker" scheme="https://metavige.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Ceph RBD 使用</title>
    <link href="https://metavige.github.io/2016/09/05/ceph-rbd/"/>
    <id>https://metavige.github.io/2016/09/05/ceph-rbd/</id>
    <published>2016-09-05T17:29:00.000Z</published>
    <updated>2019-12-16T06:15:19.608Z</updated>
    
    <content type="html"><![CDATA[<p>簡單記錄一下 Ceph RBD 使用的紀錄 ---&gt;</p><a id="more"></a><h4 id="先安裝-ceph-common"><a href="#先安裝-ceph-common" class="headerlink" title="先安裝 ceph-common"></a>先安裝 ceph-common</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">apt-get install ceph-common</span></pre></td></tr></table></figure><p>目前在 ubuntu trusty 內安裝的版本是    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ rbd -v</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ceph version 0.80.11 (8424145d49264624a3b0a204aedb127835161070)</span></pre></td></tr></table></figure><h4 id="建立-Image-動作-假設-image-name-是-test"><a href="#建立-Image-動作-假設-image-name-是-test" class="headerlink" title="建立 Image 動作 (假設 image name 是 test):"></a>建立 Image 動作 (假設 image name 是 test):</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo rbd create --size &lt;MB&gt; test</span></pre></td></tr></table></figure><h5 id="Mapping-到-dev"><a href="#Mapping-到-dev" class="headerlink" title="Mapping 到 dev"></a>Mapping 到 dev</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo rbd map test</span></pre></td></tr></table></figure><blockquote><p>這邊預設會把 image mapping 到 /dev/rbd/rbd 下面，名稱就是 image name<br>所以會放在 /dev/rbd/rbd/test  </p></blockquote><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化:"></a>格式化:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo mkfs.xfs -f &#x2F;dev&#x2F;rbd&#x2F;rbd&#x2F;test</span></pre></td></tr></table></figure><blockquote><p>我用 xfs 的原因是因為未來如果要擴充的話，比較方便可以用 xfs_growfs 指令來擴充</p></blockquote><h4 id="掛載目錄"><a href="#掛載目錄" class="headerlink" title="掛載目錄"></a>掛載目錄</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sudo mkdir -p &#x2F;mnt&#x2F;test</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ sudo mount -o nouuid -t xfs &#x2F;dev&#x2F;rbd&#x2F;rbd&#x2F;test &#x2F;mnt&#x2F;test</span></pre></td></tr></table></figure><blockquote><p>用 -o nouuid 的參數主要是，如果你建立過一次，沒下這個參數OS 會把 uuid 建立起來，這樣沒辦法反覆 map/unmap (如果你有這個需求的話，像我測試就會)</p></blockquote><h4 id="卸載"><a href="#卸載" class="headerlink" title="卸載"></a>卸載</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sudo unmount &#x2F;mnt&#x2F;test</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ sudo rbd unmap &#x2F;dev&#x2F;rbd&#x2F;rbd&#x2F;test</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;簡單記錄一下 Ceph RBD 使用的紀錄 ---&amp;gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://metavige.github.io/tags/linux/"/>
    
      <category term="ceph" scheme="https://metavige.github.io/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code (launch with babel, mocha)</title>
    <link href="https://metavige.github.io/2016/08/10/vscode-es2015-with-mocha/"/>
    <id>https://metavige.github.io/2016/08/10/vscode-es2015-with-mocha/</id>
    <published>2016-08-10T09:16:53.000Z</published>
    <updated>2019-12-16T06:15:19.652Z</updated>
    
    <content type="html"><![CDATA[<p>Visual Studio Code 是個不錯的編輯器，不過設定上，還是有很多需要手動的動作<br>特此記錄  </p><a id="more"></a><p>launch.json 範例: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="string">"configurations"</span>: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"name"</span>: <span class="string">"Run app"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"type"</span>: <span class="string">"node"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"request"</span>: <span class="string">"launch"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"runtimeExecutable"</span>: <span class="string">"$&#123;workspaceRoot&#125;/node_modules/babel-cli/bin/babel-node.js"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;/src/index.js"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"stopOnEntry"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"args"</span>: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"--presets es2015,stage-0"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"env"</span>: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"NODE_ENV"</span>: <span class="string">"development"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"name"</span>: <span class="string">"Run mocha"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"type"</span>: <span class="string">"node"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;/node_modules/mocha/bin/mocha"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"stopOnEntry"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"args"</span>: [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"--compilers"</span>, </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"js:babel-register"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"test/**/*.js"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">      ],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"runtimeExecutable"</span>: <span class="literal">null</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      <span class="string">"env"</span>: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Visual Studio Code 是個不錯的編輯器，不過設定上，還是有很多需要手動的動作&lt;br&gt;特此記錄  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="nodejs" scheme="https://metavige.github.io/tags/nodejs/"/>
    
      <category term="babel" scheme="https://metavige.github.io/tags/babel/"/>
    
      <category term="es2015" scheme="https://metavige.github.io/tags/es2015/"/>
    
  </entry>
  
  <entry>
    <title>Redux Study Day4 - Store</title>
    <link href="https://metavige.github.io/2016/06/22/redux-study-day4/"/>
    <id>https://metavige.github.io/2016/06/22/redux-study-day4/</id>
    <published>2016-06-22T21:19:28.000Z</published>
    <updated>2019-12-16T06:15:19.636Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="/2015/10/14/redux-study-day1/" title="Redux Study Day1 - Start">Redux Study Day1 - Start</a></li><li><a href="/2015/10/19/redux-study-day2/" title="Redux Study Day2 - Action">Redux Study Day2 - Action</a></li><li><a href="/2016/06/21/redux-study-day-3/" title="Redux Study Day3 - Reducer">Redux Study Day3 - Reducer</a></li><li><a href="/2016/06/22/redux-study-day4/" title="Redux Study Day4 - Store">Redux Study Day4 - Store</a></li></ul><p>繼前面的 action/reducer 之後，接下來就是要把這兩者結合起來了～  </p><a id="more"></a><h2 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h2><p>當你寫完 action/reducer 之後，大概還不太能理解，這兩個東西要怎麼串在一起？<br><strong>Store</strong> 就是把 action/reducer 串在一起的物件</p><p>所以先來說說 <strong>Store</strong> 的責任： </p><ul><li>掌管應用程式狀態；</li><li>允許藉由 getState() 獲取 state；</li><li>允許藉由 dispatch(action) 來更新 state；</li><li>藉由 subscribe(listener) 註冊 listeners;</li><li>藉由 unsubscribe(listener) 回傳的 function 處理撤銷 listeners。 </li></ul><p><img src="https://facebook.github.io/flux/img/flux-simple-f8-diagram-explained-1300w.png" alt=""></p><p>根據上面的 Flux 架構圖，<strong>action</strong> 需要透過 <strong>dispatcher</strong> 來變更 <strong>Store</strong> 的狀態。<br>所以，我們在寫完 <strong>reducer</strong> 之後，可以透過 <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener">Redux</a> 提供的 <code>createStore</code> 方法來把 <strong>reducer</strong> 放入 <strong>Store</strong> 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reducer = combineReducers(&#123; visibilityFilter, todos &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> store = createStore(reducer)</span></pre></td></tr></table></figure><h2 id="Dispatch-Actions"><a href="#Dispatch-Actions" class="headerlink" title="Dispatch Actions"></a>Dispatch Actions</h2><p>當 Store 建立之後，你只要透過 <code>store.dispatch(action)</code> 的方式，就可以透過 <strong>action</strong> 來變更 <strong>State</strong>  了。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; addTodo, completeTodo, setVisibilityFilter, VisibilityFilters &#125; <span class="keyword">from</span> <span class="string">'./actions'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">store.dispatch(addTodo(<span class="string">'Learn about actions'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">store.dispatch(addTodo(<span class="string">'Learn about reducers'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">store.dispatch(addTodo(<span class="string">'Learn about store'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">store.dispatch(completeTodo(<span class="number">0</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">store.dispatch(completeTodo(<span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">store.dispatch(setVisibilityFilter(VisibilityFilters.SHOW_COMPLETED))</span></pre></td></tr></table></figure><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p>因為 action/reducer 以及 <strong>Store</strong> 本身，都是單純的 javascript functions，所以在 UI 還沒有建立的時候，你其實可以透過 <strong>Store</strong> 的 subscribe/unsubscribe 方法，來觀察 <strong>State</strong> 物件的變化<br>藉此來得知，action/reducer 的邏輯是否正確  </p><p>修改以下上面的程式碼：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; addTodo, completeTodo, setVisibilityFilter, VisibilityFilters &#125; <span class="keyword">from</span> <span class="string">'./actions'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 訂閱每次的變更</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unsubscribe = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(store.getState());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">store.dispatch(addTodo(<span class="string">'Learn about actions'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">store.dispatch(addTodo(<span class="string">'Learn about reducers'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">store.dispatch(addTodo(<span class="string">'Learn about store'</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">store.dispatch(completeTodo(<span class="number">0</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">store.dispatch(completeTodo(<span class="number">1</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">store.dispatch(setVisibilityFilter(VisibilityFilters.SHOW_COMPLETED))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消訂閱</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">unsubscribe();</span></pre></td></tr></table></figure><p>你就可以從 console 看到資料的變化 <a href="https://chentsulin.github.io/redux/docs/basics/Store.html" target="_blank" rel="noopener">(圖片來源)</a> ：</p><p><img src="http://i.imgur.com/zMMtoMz.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2015/10/14/redux-study-day1/&quot; title=&quot;Redux Study Day1 - Start&quot;&gt;Redux Study Day1 - Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2015/10/19/redux-study-day2/&quot; title=&quot;Redux Study Day2 - Action&quot;&gt;Redux Study Day2 - Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2016/06/21/redux-study-day-3/&quot; title=&quot;Redux Study Day3 - Reducer&quot;&gt;Redux Study Day3 - Reducer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2016/06/22/redux-study-day4/&quot; title=&quot;Redux Study Day4 - Store&quot;&gt;Redux Study Day4 - Store&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;繼前面的 action/reducer 之後，接下來就是要把這兩者結合起來了～  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://metavige.github.io/tags/javascript/"/>
    
      <category term="reactjs" scheme="https://metavige.github.io/tags/reactjs/"/>
    
      <category term="redux" scheme="https://metavige.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>Redux Study Day3 - Reducer</title>
    <link href="https://metavige.github.io/2016/06/21/redux-study-day-3/"/>
    <id>https://metavige.github.io/2016/06/21/redux-study-day-3/</id>
    <published>2016-06-21T20:21:39.000Z</published>
    <updated>2019-12-16T06:15:19.636Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="/2015/10/14/redux-study-day1/" title="Redux Study Day1 - Start">Redux Study Day1 - Start</a></li><li><a href="/2015/10/19/redux-study-day2/" title="Redux Study Day2 - Action">Redux Study Day2 - Action</a></li><li><a href="/2016/06/21/redux-study-day-3/" title="Redux Study Day3 - Reducer">Redux Study Day3 - Reducer</a></li><li><a href="/2016/06/22/redux-study-day4/" title="Redux Study Day4 - Store">Redux Study Day4 - Store</a></li></ul><p>隔了半年多，重新真的找一個專案來實作 <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener">Redux</a>，不得不說，半年的變化<br>跟我當初看 <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener">Redux</a> 差異還是蠻大的。當然，觀念什麼的是差不多，只是可能很多程式碼會有所調整  </p><p>這次重新再開始，之前兩天的東西，找時間修改。今天就從 <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener">Redux</a> 核心的 Reducer 開始好了～</p><a id="more"></a><p>我一剛開始看到 <strong>Reducer</strong>，其實並沒有想到 Map/Reduce，不過慢慢的真的深入瞭解以及自己去寫了程式之後，感覺這個 <strong>Reducer</strong> 的確有點 Map/Reduce 的味道</p><p>在談到 Reducer 之前，大多數的文件會先說：『你要先確定 <strong>State</strong> 的 “形狀”』，英文就是 &quot;State&#39;s Shape&quot;  </p><p>為什麼要這樣說呢？我後來自己實作之後才知道，這跟 <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener">Redux</a> 的三大原則有關係：  </p><h2 id="Redux-的三大原則"><a href="#Redux-的三大原則" class="headerlink" title="Redux 的三大原則"></a><a href="https://github.com/reactjs/redux" target="_blank" rel="noopener">Redux</a> 的三大原則</h2><ol><li><strong>唯一真相來源</strong>: 整個應用程式的 state，被儲存在一個樹狀物件放在唯一的 store 裡面。</li><li><strong>State 是唯讀的</strong>: 改變 state 的唯一的方式是發出一個 action，也就是一個描述發生什麼事的物件。</li><li><strong>變更被寫成 pure functions</strong>: 要指定 state tree 如何藉由 actions 來轉變，你必須撰寫 pure reducers。</li></ol><p>根據這三個原則，我的理解是，當你需要有任何變更 <strong>State</strong> 的動作時，都需要發送一個 action。<br>而發送 action 之後，需要透過 <strong>Reducer</strong> 來變更 <strong>State</strong>。  但是這邊所謂的『變更』，並不是直接去修改 State 物件 (因為第二個原則)，而是透過一個 pure functions 來結合舊的 <strong>State</strong> 以及 action 所傳入的 payload 資料，來產生一個新的 State。  </p><h2 id="Pure-functions-Reducer"><a href="#Pure-functions-Reducer" class="headerlink" title="Pure functions - Reducer"></a>Pure functions - Reducer</h2><p>為什麼要強調所謂的 <strong>Pure functions</strong>？  這是為了所謂的測試性。(如果你聽得懂簡單的英文的話，我建議你看一次<a href="https://egghead.io/lessons/javascript-redux-the-reducer-function?course=getting-started-with-redux" target="_blank" rel="noopener">這段影片</a>)  </p><p>當你呼叫這個 pure functions 的時候，每次呼叫都可以得到一定的結果，不會因為上下文而改變，這樣的話，你就可以撰寫單元測試的程式來測試它  </p><h3 id="非-pure-functions"><a href="#非-pure-functions" class="headerlink" title="非 pure functions"></a>非 pure functions</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">i</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> i++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>像是上面這個方法，就不是 <strong>pure functions</strong>，因為它有改變到 i 這個資料<br>你如果再呼叫一次，結果會與上次的結果不同  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">console.log(add(a)) &#x2F;&#x2F; 0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">console.log(add(a)) &#x2F;&#x2F; 1;</span></pre></td></tr></table></figure><h3 id="pure-functions"><a href="#pure-functions" class="headerlink" title="pure functions"></a>pure functions</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">i</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> i+<span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>但如果是上面的寫法，每次呼叫結果都會是 <code>1</code>，這就表示你寫的程式是可以被預測的！<br>當然之後還可以延伸有其他做法...... 這屬於進階用法，以後再討論～  </p><h2 id="State-的-Mapping"><a href="#State-的-Mapping" class="headerlink" title="State 的 Mapping"></a>State 的 Mapping</h2><p>基本上透過 <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener">Redux</a> 設定進去的所有 reducer functions，在每次 action 被 dispath 的時候，會呼叫註冊的所有 <strong>Reducer</strong>，你只需要透過判斷 <code>action.type</code> 來決定你是否要處理這個 action  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">state, action</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">case</span> <span class="string">'ACTION'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> &#123; ... &#125;; <span class="comment">// 回傳新狀態物件</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> state;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>如果你並不要處理這個 <code>action</code>，你必須要回傳原本的 <code>state</code> 物件，以保持原先的狀態不改變。   </p><p>當你的 <code>state</code> 物件的屬性如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  visibilityFilter: &#39;&#39;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  todos: []</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>你可以寫一個 <strong>Reducer</strong> 來處理這全部的狀態，但是，也可以透過 <code>combineReducer</code> 的方法，寫兩個 pure functions 來分別處理不同的 <code>state properties</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visibilityFilter</span>(<span class="params">state = <span class="string">'SHOW_ALL'</span>, action</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">case</span> <span class="string">'SET_VISIBILITY_FILTER'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> action.filter</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> state</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = [], action</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> [</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        ...state,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">          text: action.text,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">          completed: <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">case</span> <span class="string">'COMPLETE_TODO'</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> state.map(<span class="function">(<span class="params">todo, index</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (index === action.index) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, todo, &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            completed: <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">          &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> todo</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> state</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reducer = combineReducers(&#123; visibilityFilter, todos &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> store = createStore(reducer)</span></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p><strong>Reducer</strong> 這個方法，其實要多寫寫才會比較清楚，而且當你的 State 物件 <strong>『形狀』</strong> 越來越清楚的時候，你才會對 <strong>Reducer</strong> 比較有感覺   </p><p>所以剛開始寫的時候，我會建議一次寫一組 action/reducer，都測試確認之後，透過 <code>createStore</code> 串起來測試一遍，比較能夠理解  </p><hr>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2015/10/14/redux-study-day1/&quot; title=&quot;Redux Study Day1 - Start&quot;&gt;Redux Study Day1 - Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2015/10/19/redux-study-day2/&quot; title=&quot;Redux Study Day2 - Action&quot;&gt;Redux Study Day2 - Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2016/06/21/redux-study-day-3/&quot; title=&quot;Redux Study Day3 - Reducer&quot;&gt;Redux Study Day3 - Reducer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/2016/06/22/redux-study-day4/&quot; title=&quot;Redux Study Day4 - Store&quot;&gt;Redux Study Day4 - Store&lt;/a&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;隔了半年多，重新真的找一個專案來實作 &lt;a href=&quot;https://github.com/reactjs/redux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redux&lt;/a&gt;，不得不說，半年的變化&lt;br&gt;跟我當初看 &lt;a href=&quot;https://github.com/reactjs/redux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redux&lt;/a&gt; 差異還是蠻大的。當然，觀念什麼的是差不多，只是可能很多程式碼會有所調整  &lt;/p&gt;
&lt;p&gt;這次重新再開始，之前兩天的東西，找時間修改。今天就從 &lt;a href=&quot;https://github.com/reactjs/redux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redux&lt;/a&gt; 核心的 Reducer 開始好了～&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://metavige.github.io/tags/javascript/"/>
    
      <category term="reactjs" scheme="https://metavige.github.io/tags/reactjs/"/>
    
      <category term="redux" scheme="https://metavige.github.io/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>How to Get Node.js Logging Right</title>
    <link href="https://metavige.github.io/2016/05/31/how-to-get-nodejs-logging-right/"/>
    <id>https://metavige.github.io/2016/05/31/how-to-get-nodejs-logging-right/</id>
    <published>2016-05-31T21:24:33.000Z</published>
    <updated>2019-12-16T06:15:19.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.risingstack.com/node-js-logging-tutorial/" target="_blank" rel="noopener">How to Get Node.js Logging Right</a></p><a id="more"></a><h2 id="Node-js-Logging-需求"><a href="#Node-js-Logging-需求" class="headerlink" title="Node.js Logging 需求"></a>Node.js Logging 需求</h2><ol><li>Timestamp - 紀錄事件發生的時間點。<strong><em>很重要</em></strong>！</li><li>Logging format - 記錄格式。寫出的紀錄當然要是可讀性高的。</li><li>Log destination - 很多 Log 的工具有提供紀錄到不同地方的功能。作者認為我們應該只使用 standard output/error。因為這不是 application 所應該要做的事情。(筆記！</li><li>Log Level - 能夠紀錄 Log 的等級！用來區分不同等級的資料，之後也好做處理。</li></ol><h2 id="Log-技巧"><a href="#Log-技巧" class="headerlink" title="Log 技巧"></a>Log 技巧</h2><ul><li>never, ever log credentials, passwords or any sensitive information.</li><li>Adding correlation IDs: 利用 correlation IDs，當有 Log 是一個長時間處理的功能，需要有前後關聯的時候，透過一個 correlation ID 可以知道紀錄的關係。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://blog.risingstack.com/node-js-logging-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How to Get Node.js Logging Right&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="nodejs" scheme="https://metavige.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>用 Ansible 管理 Windows</title>
    <link href="https://metavige.github.io/2016/01/19/ansible-windows-manage-start/"/>
    <id>https://metavige.github.io/2016/01/19/ansible-windows-manage-start/</id>
    <published>2016-01-19T22:14:24.000Z</published>
    <updated>2019-12-16T06:15:19.608Z</updated>
    
    <content type="html"><![CDATA[<p>嗯～<a href="http://www.ansible.com" target="_blank" rel="noopener">Ansible</a> 很好用<br>所以很希望也可以用在 Windows 上～  </p><a id="more"></a><h2 id="開始"><a href="#開始" class="headerlink" title="開始"></a>開始</h2><ol><li>首先要參考 <a href="http://docs.ansible.com/ansible/intro_windows.html#installing-on-the-control-machine" target="_blank" rel="noopener">Ansible Windows Support</a> 的文件  </li><li>確認 Windows 本身的 Powershell 版本要在 3.0 以上 (沒有的話，就可以下載這個 <a href="https://github.com/cchurch/ansible/blob/devel/examples/scripts/upgrade_to_ps3.ps1" target="_blank" rel="noopener">upgrade_to_ps3.ps1</a> 來執行)  </li><li>設定 winrm - 執行 <a href="https://github.com/ansible/ansible/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1" target="_blank" rel="noopener">setup.ps1</a>  <ol><li>Windows 7/2008R2 版本還要先安裝 <a href="">http://support.microsoft.com/kb/2842230</a></li><li>Windows 8.1/2012 以後版本已經安裝了 .Net 4.0，所以不需要特別作什麼事情</li></ol></li></ol><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><p>因為想在本機測試，所以用 <a href="https://www.vagrantup.com" target="_blank" rel="noopener">Vagrant</a> 來測試  </p><ol><li>我這次用的是 <a href="https://atlas.hashicorp.com/opentable/boxes/win-2012r2-standard-amd64-nocm" target="_blank" rel="noopener">win2012-r2</a> 的 box</li><li>很簡單的用 <code>vagrant init opentable/win-2012r2-standard-amd64-nocm; vagrant up --provider virtualbox</code> 就可以啟動了 </li><li>當然，需要進入 Windows 裡面去設定 winrm，參考上面的步驟，但是我懶得手動下載後才執行，所以我用了 <a href="https://chocolatey.org" target="_blank" rel="noopener">chocolatey</a> 的技巧，直接下載後執行。開啟 Powershell 視窗，執行下面指令就可以：   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">iex ((new-object net.webclient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ansible&#x2F;ansible&#x2F;devel&#x2F;examples&#x2F;scripts&#x2F;ConfigureRemotingForAnsible.ps1&#39;))</span></pre></td></tr></table></figure></li><li>執行完畢之後，我本來以為可以直接用 <a href="https://www.vagrantup.com" target="_blank" rel="noopener">Vagrant</a> 的 provision 功能，結果碰壁了～</li></ol><h2 id="問題一"><a href="#問題一" class="headerlink" title="問題一"></a>問題一</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ ansible default -i .vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory -m win_ping -vvvv</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">default | FAILED! =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"failed"</span>: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"msg"</span>: <span class="string">"ERROR! ssl: 500 WinRMTransport. [SSL: UNKNOWN_PROTOCOL] unknown protocol (_ssl.c:590)"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>原本以為直接用 <a href="https://www.vagrantup.com" target="_blank" rel="noopener">Vagrant</a> 產生的 inventory 檔案就可以執行，所以先用 <code>win_ping</code> 指令測試一下<br>結果就出現了上面的錯誤<br>找了一下資料以及對照 <a href="https://www.vagrantup.com" target="_blank" rel="noopener">Vagrant</a> 產生的 <code>vagrant_ansible_inventory</code> 檔案，才發現他產生出來的檔案是這樣：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># Generated by Vagrant</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">default ansible_connection&#x3D;winrm ansible_ssh_host&#x3D;127.0.0.1 ansible_ssh_port&#x3D;55985 ansible_ssh_user&#x3D;&#39;vagrant&#39; ansible_ssh_pass&#x3D;&#39;vagrant&#39;</span></pre></td></tr></table></figure><p>麻煩的是，產生出來的 <code>ansible_ssh_port</code> 走的是 http port<br>內部啟動 winrm 會有兩個 port，對應 http/https。分別是 5985/5986<br>virtualbox 會幫忙 mapping 這兩個 port，分別對應 55985/55986<br>但是 ansible 需要走 https，所以就出現了上面的錯誤訊息  </p><p>改法就是自己產生一個 inventory 檔案 (你不能改 .vagrant 下面產生出來的檔案，因為每次執行 vagrant provision 都會重新產生)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">[windows]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">default ansible_connection&#x3D;winrm ansible_ssh_host&#x3D;127.0.0.1 ansible_ssh_port&#x3D;55986 ansible_ssh_user&#x3D;&#39;vagrant&#39; ansible_ssh_pass&#x3D;&#39;vagrant&#39;</span></pre></td></tr></table></figure><h2 id="問題二"><a href="#問題二" class="headerlink" title="問題二"></a>問題二</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ ansible windows -i hosts -m win_ping -vvvv</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">default | FAILED! =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"failed"</span>: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"msg"</span>: <span class="string">"ERROR! ssl: 500 WinRMTransport. [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:590)"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>本來以為改完後，一切幸福美滿～ 結果一執行就給我拋另外一個錯誤<br>不過這個錯誤看起來就是 SSL 憑證問題！靠！這怎麼改？？？    </p><blockquote><p>我前兩天升級了 Ansible 2.0，所以我還在想說是不是因為這個原因</p></blockquote><p>果不其然，找到了這篇文章: <a href="http://everythingshouldbevirtual.com/packer-vagrant-ansible-windows-winrmtransport-error" target="_blank" rel="noopener">Packer – Vagrant – Ansible – Windows (WinRMTransport Error)</a><br>Ansible 也有一個 <a href="https://github.com/ansible/ansible/issues/10294" target="_blank" rel="noopener">Issue</a> 在解釋這個問題<br>改法就是，在現在的目錄下，建立一個 <code>callback_plugins</code> 目錄。然後建立一個 <code>fix_ssl.py</code> 檔案:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ssl</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> hasattr(ssl, <span class="string">'_create_default_https_context'</span>) <span class="keyword">and</span> hasattr(ssl, <span class="string">'_create_unverified_context'</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    ssl._create_default_https_context = ssl._create_unverified_context</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallbackModule</span><span class="params">(object)</span>:</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">pass</span></span></pre></td></tr></table></figure><p>根據這段程式碼英文的意思，我猜測就是忽略自簽章的 SSL 憑證驗證～因為我在 .Net 幹過一樣的事情～  </p><p>所以這次執行就成功了～  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ ansible windows -i hosts -m win_ping -vvvv</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">default | SUCCESS =&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"invocation"</span>: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"module_name"</span>: <span class="string">"win_ping"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>以上是我碰到的兩個問題，還好網路都有找到解法～<br>所以之後應該只需要參考 <a href="http://docs.ansible.com/ansible/list_of_windows_modules.html" target="_blank" rel="noopener">Windows Modules</a> 試試看用法，應該之後就可以拿來管理 Windows 了～  </p><p>不過可能還是要注意下面的事情：  </p><ul><li>注意自己安裝的 <a href="http://www.ansible.com" target="_blank" rel="noopener">Ansible</a> 版本，我目前測試的版本是 2.0，所以我不知道 1.x 版本是不是沒有我遇到的問題  </li><li>注意 winrm 設定，因為我這次測試是用 Vagrant box，所以是直接用 Port forwarding 做到。<br>如果是實機，就得自己去找 winrm 的 port  </li><li>之後如果要在實機測試的話，可能還要另外注意帳號密碼問題</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嗯～&lt;a href=&quot;http://www.ansible.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ansible&lt;/a&gt; 很好用&lt;br&gt;所以很希望也可以用在 Windows 上～  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ansible" scheme="https://metavige.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>First Electron App</title>
    <link href="https://metavige.github.io/2015/12/30/First-Electron-App/"/>
    <id>https://metavige.github.io/2015/12/30/First-Electron-App/</id>
    <published>2015-12-30T20:59:10.000Z</published>
    <updated>2019-12-16T06:15:19.608Z</updated>
    
    <content type="html"><![CDATA[<p>很早就想要用 <a href="http://electron.atom.io" target="_blank" rel="noopener">Electron</a> 來開發 App 了，因為 Web 其實用起來有時候卡卡的<br>尤其 <a href="http://electron.atom.io" target="_blank" rel="noopener">Electron</a> 出現之後，開發 Web 等同於開發 App，真是令人感到興奮～  </p><a id="more"></a><h2 id="開始"><a href="#開始" class="headerlink" title="開始"></a>開始</h2><ul><li><p>建立一個目錄</p></li><li><p>用 <code>npm init</code> 建立 package.json</p></li><li><p>安裝 <code>electron-prebuilt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install --save-dev electron-prebuilt</span></pre></td></tr></table></figure></li></ul><h2 id="程式內容"><a href="#程式內容" class="headerlink" title="程式內容"></a>程式內容</h2><p>簡單的 Hello World!   </p><ul><li><p>先建立 app 目錄</p></li><li><p>產生 <code>app/index.html</code> 檔案，內容很簡單！就是 Hello!  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;Hello&lt;&#x2F;h2&gt;</span></pre></td></tr></table></figure></li><li><p>建立 <code>main.js</code>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#39;use strict&#39;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">var app &#x3D; require(&#39;app&#39;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">var BrowserWindow &#x3D; require(&#39;browser-window&#39;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">var mainWindow &#x3D; null;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">app.on(&#39;ready&#39;, function() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    mainWindow &#x3D; new BrowserWindow(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        height: 600,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        width: 800</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    mainWindow.loadURL(&#39;file:&#x2F;&#x2F;&#39; + __dirname + &#39;&#x2F;app&#x2F;index.html&#39;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure></li></ul><h2 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h2><p>因為剛剛安裝了 <code>electron-prebuilt</code>，所以可以直接用下面的指令就可以執行了！  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">node_modules&#x2F;.bin&#x2F;electron .</span></pre></td></tr></table></figure><p>這樣就可以了～  </p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>參考 <a href="https://www.npmjs.com/package/electron-packager" target="_blank" rel="noopener">electron-packager</a>  </p><ul><li><p>先安裝 <code>electron-packager</code></p></li><li><p>參考說明文件，用下面的指令來打包自己的 App。（注意那個版本只的是 Electron 版本，不是你自己 App 的版本）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ electron-packager .&#x2F; App1 --platform&#x3D;darwin --arch&#x3D;x64 --out ~&#x2F;Desktop&#x2F;App1 --version 0.36.2 --overwrite</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Packaging app for platform darwin x64 using electron v0.36.2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Wrote new app to &#x2F;Users&#x2F;RickyChiang&#x2F;Desktop&#x2F;App1&#x2F;App1-darwin-x64</span></pre></td></tr></table></figure><p>目前 Electron Release 的版本是 0.36.2，可以到 <a href="https://github.com/atom/electron/releases" target="_blank" rel="noopener">https://github.com/atom/electron/releases</a> 去看  </p></li><li><p><code>electron-packager</code> 命令列的說明可以參考 <a href="https://github.com/maxogden/electron-packager/blob/master/usage.txt" target="_blank" rel="noopener">usage.txt</a></p></li><li><p>到桌面看就會有檔案產生了，點兩下就可以執行了  </p><img src="/2015/12/30/First-Electron-App/desktop-app1.png" class="" title="[Desktop]"> </li></ul><h2 id="後語"><a href="#後語" class="headerlink" title="後語"></a>後語</h2><p>如果要方便執行的話，可以編輯一下 <code>package.json</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"name"</span>: <span class="string">"app1"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"description"</span>: <span class="string">""</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"main"</span>: <span class="string">"./main.js"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"scripts"</span>: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"start"</span>: <span class="string">"electron ."</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"package"</span>: <span class="string">"electron-packager ./ App1 --platform=darwin --arch=x64 --out ~/Desktop/App1 --version 0.36.2 --overwrite"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="string">"devDependencies"</span>: &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"electron-packager"</span>: <span class="string">"^5.2.0"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"electron-prebuilt"</span>: <span class="string">"^0.36.2"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>這樣就可以用 <code>npm start</code> 執行了～<br>編譯的話，就用 <code>npm run package</code> 就可以了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早就想要用 &lt;a href=&quot;http://electron.atom.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Electron&lt;/a&gt; 來開發 App 了，因為 Web 其實用起來有時候卡卡的&lt;br&gt;尤其 &lt;a href=&quot;http://electron.atom.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Electron&lt;/a&gt; 出現之後，開發 Web 等同於開發 App，真是令人感到興奮～  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="electron" scheme="https://metavige.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>在 .Net 專案使用 gulp build</title>
    <link href="https://metavige.github.io/2015/12/12/dotnet-proj-with-gulp/"/>
    <id>https://metavige.github.io/2015/12/12/dotnet-proj-with-gulp/</id>
    <published>2015-12-12T09:58:06.000Z</published>
    <updated>2019-12-16T06:15:19.616Z</updated>
    
    <content type="html"><![CDATA[<p>一直以來，開發 .Net 專案，因為只能在 Windows 上使用 Visual Studio 開發<br>Build Project 的 Performance 總是我一個覺得很麻煩的事情   </p><a id="more"></a><p>參考目前開發 web project 的經驗，決定找 gulp 相關的資料來改  </p><h3 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h3><ul><li>先用 <code>npm init</code> 建立 package.json</li><li>安裝套件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp gulp-msbuild</span></pre></td></tr></table></figure><ul><li>寫 <code>gulpfile.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msbuild = <span class="built_in">require</span>(<span class="string">'gulp-msbuild'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">"build"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"./Sample.sln"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                .pipe(msbuild(&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                    targets: [<span class="string">'Clean'</span>, <span class="string">'Build'</span>],</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                    toolsVersion: <span class="number">14.0</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                    errorOnFail: <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                &#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    gulp.watch(<span class="string">'**/*.cs'</span>, [<span class="string">'build'</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'build'</span>]);</span></pre></td></tr></table></figure><ul><li>開啟 <code>cmd</code>，執行 <code>gulp watch</code></li></ul><h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>這邊提供的方式，可以讓編譯這件事情，在背景作業。在你有改變程式碼之後自動作業<br>因為我自己寫程式的過程，以及看同事在執行 .Net 專案的作法，大多數時間都是在等待編譯<br>這些時間其實都很浪費  </p><p>要加速開發，這只是一個小動作而已，網路上找到的<a href="(http://www.mikeobrien.net/blog/using-gulp-to-build-and-deploy-dotnet-apps-on-windows/)">文章</a>，是可以在搭配更多 Task 來做測試、改變版本號等自動化動作<br>但是這還需要些時間來整合，這邊只是簡單的改變 build 的部分  </p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://www.mikeobrien.net/blog/using-gulp-to-build-and-deploy-dotnet-apps-on-windows/" target="_blank" rel="noopener">Using Gulp to Build and Deploy .NET Apps on Windows</a></li><li><a href="https://www.npmjs.com/package/gulp-msbuild" target="_blank" rel="noopener">gulp-msbuild</a></li><li><a href="https://www.npmjs.com/package/gulp-mstest" target="_blank" rel="noopener">gulp-mstest</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以來，開發 .Net 專案，因為只能在 Windows 上使用 Visual Studio 開發&lt;br&gt;Build Project 的 Performance 總是我一個覺得很麻煩的事情   &lt;/p&gt;
    
    </summary>
    
    
      <category term="程式開發" scheme="https://metavige.github.io/categories/%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC/"/>
    
    
      <category term="javascript" scheme="https://metavige.github.io/tags/javascript/"/>
    
      <category term="dotnet" scheme="https://metavige.github.io/tags/dotnet/"/>
    
      <category term="gulp" scheme="https://metavige.github.io/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>快速撰寫好看的 REST API 文件 - 使用 RAML</title>
    <link href="https://metavige.github.io/2015/11/16/raml-easy-start-npm/"/>
    <id>https://metavige.github.io/2015/11/16/raml-easy-start-npm/</id>
    <published>2015-11-16T15:02:53.000Z</published>
    <updated>2019-12-16T06:15:19.628Z</updated>
    
    <content type="html"><![CDATA[<p>寫文件大概是工程師最討厭的事情，沒有之一</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>為了要寫份好看、易懂的 API 文件，如果用現在比較習慣的 Markdown 語法來寫，還需要去找格式要怎樣定義。<br>這對工程師來說，實在是莫大的折磨。老實說，這比要我寫測試案例還難～  </p><p>所以找了網路上有關 REST API 文件規格的資料，找到了這篇文章 <a href="http://www.programmableweb.com/news/why-you-should-use-markdown-your-api-documentation/2015/02/19" target="_blank" rel="noopener">Why You Should Use Markdown for Your API Documentation</a><br>其中提到了 <a href="http://raml.org" target="_blank" rel="noopener">RAML</a> - RESTful API Modeling Language  </p><p>因為我 API 是已經寫好的狀況，所以並沒有使用到它與 Source Code 結合的部分，所以只是單純的自己根據之前定的規格，把文件寫出來，並且要加上一些簡單的操作說明<br>當然我希望這些也都是用 Markdown 的語法來寫  </p><h2 id="開始"><a href="#開始" class="headerlink" title="開始"></a>開始</h2><p>要開始做，當然是先看別人的範例怎麼做，直接參考！<br>由於我後續要把規格轉換成文件，所以我找到了 <a href="https://github.com/kevinrenskers/raml2html" target="_blank" rel="noopener">raml2html</a> 的工具，而這個工具的 Example 相當的詳細！值得參考  </p><p>接下來，你可以到 <a href="http://raml.org/developers/design-your-api" target="_blank" rel="noopener">Design Your API</a> 這個頁面，去下載 <a href="https://github.com/mulesoft/api-designer" target="_blank" rel="noopener">API Designer</a><br>有裝 npm 的人可以直接用以下指令就安裝好了  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install -g api-designer</span></pre></td></tr></table></figure><p>安裝完之後，執行 <code>api-designer</code> 指令，然後開啟瀏覽器，打開 <code>http://localhost:3000</code>，就可以看到類似下面的畫面了！  </p><p><img src="api_designer_web.png" alt=""></p><p>透過這個 Api Designer 的 UI，可以很簡單的看出你編輯的 RAML 格式是否正確，如果不正確，這個 UI 就會提醒你錯誤發生的地方，並且在你編輯完後可以直接預覽～<br>(這邊不介紹這個 UI 的使用～～～)  </p><p>更新：<br>根據 <a href="https://github.com/mulesoft/api-designer/blob/master/docs/file-system.md" target="_blank" rel="noopener">Editor File System</a> 這份文件說的，以及看了一下我自己瀏覽器的設定，才發現，這個 api designer 是把資料存在 LocalStorage 中<br>所以，它並不是把資料存在 server 端。  </p><p>這有個好處是，大家可以共用同樣的 api designer UI 來編輯自己的文件格式，不用擔心會被別人改到<br>不過壞處也是一樣，別人無法編輯～  </p><p>不過，根據這個好處，表示其實我可以很安心的自己做一個 docker image<br>這樣方便其他人使用  </p><p>有需要的人可以自己下載～  (因為是用 alpine 為 base，所以只有 48.86 MB)<br><a href="">https://github.com/metavige/alpine-api-designer</a></p><h2 id="轉換-HTML"><a href="#轉換-HTML" class="headerlink" title="轉換 HTML"></a>轉換 HTML</h2><p>寫完 <a href="http://raml.org" target="_blank" rel="noopener">RAML</a> 之後還是需要轉換成 HTML 才好看，所以透過 <a href="https://github.com/kevinrenskers/raml2html" target="_blank" rel="noopener">raml2html</a> 工具，先用 npm 安裝：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm i -g raml2html</span></pre></td></tr></table></figure><p>然後透過指令去轉換：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">raml2html -i example.raml -o example.html</span></pre></td></tr></table></figure><p>如果你寫的很豐富，結果可能就會像是 raml2html 的範例一樣</p><p><img src="example.png" alt="Example"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>現在我自己使用還有遇到一些問題，不過，整體來說，產出的內容我自己是還蠻滿意的<br>格式也算不難看，當然，文件內容本身還需要傷腦筋一下，畢竟文件是要給人看的，內容部分其實還蠻重要的！  </p><p>目前我使用的是 RAML 0.8 的版本，我想應該就夠了因為 RAML 1.0 好像是新的，不知道新的會不會有什麼問題，我也沒多加研究  </p><p>之後等到文件內容都寫完了，再來研究自動化的部份以及新的 RAML 1.0 規格，像是不是可以結合 CI (Jenkins) ?  </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/raml-org/raml-spec/blob/master/raml-0.8.md" target="_blank" rel="noopener">RAML 0.8</a></li><li><a href="http://docs.raml.org/specs/1.0/" target="_blank" rel="noopener">RAML 1.0</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;寫文件大概是工程師最討厭的事情，沒有之一&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="RESTful" scheme="https://metavige.github.io/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 透過 HTTP Method 來做 Proxy Pass</title>
    <link href="https://metavige.github.io/2015/11/13/nginx-proxy-pass-by-http-method/"/>
    <id>https://metavige.github.io/2015/11/13/nginx-proxy-pass-by-http-method/</id>
    <published>2015-11-13T14:36:41.000Z</published>
    <updated>2019-12-16T06:15:19.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>開發一套系統，把資料處理 (POST/PUT/DELETE) 與查詢 (GET) 的功能分開做<br>變成提供兩套服務，但對 Client 來說，還是需要整合成相同的 Uri<br>所以就透過 Nginx 來做到前端介面的整合  </p><a id="more"></a><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    if ($request_method !~* GET) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        # For Write Requests</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        proxy_pass http:&#x2F;&#x2F;writers;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    # For Read Requests</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    proxy_pass http:&#x2F;&#x2F;readers;&#125;</span></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>雖然說，Nginx 其實並不希望你使用 if (<a href="https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/" target="_blank" rel="noopener">If Is Eval</a>)，不過對工程師來說，能簡單的做到效果是最重要的！！！     </p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Stackoverflow: <a href="http://stackoverflow.com/questions/8591600/nginx-proxy-pass-based-on-whether-request-method-is-post-put-or-delete" target="_blank" rel="noopener">nginx proxy_pass based on whether request method is POST, PUT or DELETE</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;開發一套系統，把資料處理 (POST/PUT/DELETE) 與查詢 (GET) 的功能分開做&lt;br&gt;變成提供兩套服務，但對 Client 來說，還是需要整合成相同的 Uri&lt;br&gt;所以就透過 Nginx 來做到前端介面的整合  &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="nginx" scheme="https://metavige.github.io/tags/nginx/"/>
    
  </entry>
  
</feed>
